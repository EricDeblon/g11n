/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright (c) 2003, by Sun Microsystems, Inc.
 * All rights reserved.
 */

#ident  "@(#)llib-lauto_ef 1.10 03/07/18 SMI"

#include <stdio.h>
#include <stdlib.h>
#include <iconv.h>
#include <errno.h>
#include <locale.h>
#include <math.h>
#include <limits.h>
#include <ctype.h>
#include <fcntl.h>
#include <memory.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>

#include "auto_ef_lib.h"

/* open method */
size_t auto_ef_file(auto_ef_t **, const char *, int);
size_t auto_ef_str (auto_ef_t **, const char *, size_t, int);
void auto_ef_free(auto_ef_t *);
char *auto_ef_get_encoding(auto_ef_t);
double auto_ef_get_score(auto_ef_t);

/*
 * function prototype : auto_ef_file.c
 */
auto_ef_t *execute_file(const char *, int, int, size_t *);
void CorrectATEFO(_auto_ef_t);
void remove_encoding(_auto_ef_t, char *);
int buflength_file(char *);
int SuperSetOr2022(char *);
void ConvScore_file(_auto_ef_t *);
void CalcAutoefFile(auto_ef_t *, _auto_ef_t *);
void AutoefAddScore(char *, double, _auto_ef_t *);
int AutoefFindKeyWord(char *, _auto_ef_t *);

/*
 * function prototype : auto_ef_str.c
 */
const char *lengthbuf(const char *, int *);
auto_ef_t *ATEFO2AUTOEF(_auto_ef_t, size_t *);
_auto_ef_t SortATEFO(_auto_ef_t);
int Regist_AUTOEF(char *, double, char *, _auto_ef_t *);
char *M_FromCodeToLang(char *);
void Free_AUTOEF(_auto_ef_t *);
void ConvScore(_auto_ef_t *);
double prob_inte(double);
int ReturnCodeNum(char *);
double fact(long);
void QSort_AUTOEF(_auto_ef_t *, int, int, _auto_ef_t);

/*
 * function prototype : auto_ef_str.c
 */
int IdentfyEncoding(int, size_t, int *, char *, char *, const char *,
	_auto_ef_t *, int *, const char *);
int IsSingleByte_buf(const char *, double *, char *, int, srd *,
	double *, double *, _auto_ef_t *);
int IsHKSCSOrBIG5(char *, const char *, char *, size_t, _auto_ef_t *, double);
int RegistBIG5(char *, size_t, char *, const char *, _auto_ef_t *,
	srd *, double *, double *);
int RegistEUC(char *, int, char *, _auto_ef_t *, srd *, double *, double *);
int RegistHashTable(unsigned char, unsigned char, srd *);
int HashTableOpen(char *, srd *, double *, double *);
void get_hash_name(char *, char *);
int Regist_ASCII_ISO2022JP(int, char *, _auto_ef_t *);
int IsAsciiOr2022_buf(const char *, int, char *);
int Is2022KROrCN(int, char *, char *, size_t, _auto_ef_t *);
int Hash(unsigned char, unsigned char);
int TotalScore_buf(const char *, double *, int, srd *, double *, double *);
int FindKeyWord(unsigned char, unsigned char, srd *);
int GetScore(unsigned char, unsigned char, srd *);
double Calc_SD(int, double *, double *);
char *chopbuf(char *);
void FreeHashTable(srd *);
int CheckISO2022CN(unsigned char, unsigned char, unsigned char, unsigned char);
int CheckISO2022KR(unsigned char, unsigned char, unsigned char, unsigned char);
