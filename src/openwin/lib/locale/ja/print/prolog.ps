%!
%
% CDDL HEADER START
%
% The contents of this file are subject to the terms of the
% Common Development and Distribution License (the "License").
% You may not use this file except in compliance with the License.
%
% You can obtain a copy of the license at src/OPENSOLARIS.LICENSE
% or http://www.opensolaris.org/os/licensing.
% See the License for the specific language governing permissions
% and limitations under the License.
%
% When distributing Covered Code, include this CDDL HEADER in each
% file and include the License file at src/OPENSOLARIS.LICENSE.
% If applicable, add the following below this CDDL HEADER, with the
% fields enclosed by brackets "[]" replaced with your own identifying
% information: Portions Copyright [yyyy] [name of copyright owner]
%
% CDDL HEADER END
%

% ----------------------------------------------------------------------------
% @(#)prolog.ps	1.16 98/05/22
% Copyright (c) 1996 by Sun Microsystems, Inc.
% prolog.ps for EUC locale
% ----------------------------------------------------------------------------

/RM-Mode false def

/HalfWidthMetrics {
    CodeSet1 findfont 1000 scalefont setfont
    <b0a1> stringwidth pop
    CodeSet0 findfont 1000 scalefont setfont
    (a) stringwidth pop
    2 mul div
} bind def

/checkJfont {
   /CodeSet2  exch def
   /CodeSet1_ exch def
   /CodeSet1  exch def
   /CodeSet0  exch def
   /Newfont  exch def

   CodeSet1 findfont /FontName get /Courier eq {
        false
   } {
        true
   } ifelse

} bind def

/CopyFont {
    1 index maxlength add dict begin {
        1 index /FID ne 2 index /UniqueID ne and {
            def
        } {
            pop pop
        } ifelse
    } forall currentdict end
} bind def

/makeFakefont {
        CodeSet0 findfont 0 CopyFont
        dup /FontName Newfont  put
        Newfont exch definefont pop
} bind def

% check printer or DPS can support CID fonts
/CIDcapable false def

systemdict /composefont known {
        /CIDInit /ProcSet resourcestatus {
		pop pop
		/GothicBBB-Medium-H findfont /FMapType get 9 eq {
                	/CIDcapable true def
		} if
        } if
} if

% ----------------------------------------------------------------------------

/makeEUCfont {
    CIDcapable true eq {
        /CIDInit /ProcSet findresource begin
        Newfont [ CodeSet1 CodeSet0 CodeSet2 ]
        beginrearrangedfont

        RM-Mode {
            1 beginusematrix
              [HalfWidthMetrics 0 0 1 0 0]
            endusematrix
        } if

        1 usefont
        1 beginbfrange
        <20> <7e>  <20>
        endbfrange

        2 usefont
        1 beginbfrange
        <8ea0> <8efe>  <20>
        endbfrange

        endrearrangedfont
        end
    } {
	/_Codeset3Font 13 dict begin
		/FontName 1 index def
		/FontType 0 def
		/FMapType 5 def
		/FontMatrix matrix def
			512 array 0 1 511 { 1 index exch 0 put } for
		/Encoding exch def
		false {
			97 array
			0 1 96 { 1 index exch /NotDefFont findfont put } for
			[  ] dup length 2 idiv 1 sub 0 1 3 -1 roll {
				2 mul 1 index exch 2 getinterval aload pop
				Encoding 2 index dup 2 mul 1 add exch 32 sub put
				findfont exch 32 sub exch 3 index 3 1 roll put
			} for pop
		}{ [ /NotDefFont findfont ] } ifelse
		/FDepVector exch def
		currentdict
	end
	definefont pop

	/Newfont-123 13 dict begin
		/FontName 1 index def
		/FontType 0 def
		/FMapType 5 def
		/WMode 0 def
		/FontMatrix matrix def
			CodeSet1_ findfont dup
			/Encoding get exch
			/FDepVector get dup length dup 2 add array
			dup 4 -1 roll 0 exch putinterval
			dup 2 index CodeSet2 findfont put
			dup 2 index 1 add /_Codeset3Font findfont put
		/FDepVector exch def exch
			512 array 0 1 511 { 1 index exch 0 put } for
			0 1 3 index length 1 sub {
				2 index 1 index get exch 2 mul 1 add 2 index
				exch 3 -1 roll put
			} for exch pop
			dup 16#8e 16#80 sub 2 mul 1 add 3 index put
			dup 16#8f 16#80 sub 2 mul 1 add 4 -1 roll 1 add put
		/Encoding exch def
		false {
			[  ] dup length 2 idiv 1 sub
			0 1 3 -1 roll {
				2 mul 1 index exch 2 getinterval aload pop
				FDepVector dup length dup 1 add array
				dup 0 5 -1 roll putinterval
				/FDepVector 1 index def
				Encoding 5 -1 roll 2 mul 1 add 3 index put
				exch 3 -1 roll findfont put
			} for pop
		} if
		currentdict
	end
	definefont

	Newfont 13 dict begin
		/FontName 1 index def
		/FontType 0 def
	/FMapType 4 def
	/WMode 0 def
	/Encoding [ 0 1 ] def
	/FontMatrix matrix def
	/FDepVector
		[
			CodeSet0 findfont
			RM-Mode {
				[HalfWidthMetrics 0 0 1 0 0] makefont
			} if
			5 -1 roll
		] def
	currentdict
	end definefont pop
    } ifelse
} bind def

% ----------------------------------------------------------------------------

/Ryumin {
   /Ryumin-Light-EUC-H /Ryumin-Light-H /Ryumin-Light.Katakana
} def
/Gothic {
   /GothicBBB-Medium-EUC-H /GothicBBB-Medium-H /GothicBBB-Medium.Katakana
} def

/LC_Times-Roman /Times-Roman Ryumin checkJfont {
	makeEUCfont
} {
	makeFakefont
} ifelse

/LC_Times-Bold /Times-Bold Ryumin checkJfont {
	makeEUCfont
} {
	makeFakefont
} ifelse

/LC_Times-Italic /Times-Italic Ryumin checkJfont {
	makeEUCfont
} {
	makeFakefont
} ifelse

/LC_Helvetica /Helvetica Gothic checkJfont {
	makeEUCfont
} {
	makeFakefont
} ifelse

/LC_Helvetica-Bold /Helvetica-Bold Gothic checkJfont {
	makeEUCfont
} {
	makeFakefont
} ifelse

/LC_Helvetica-BoldOblique /Helvetica-BoldOblique Gothic checkJfont {
	makeEUCfont
} {
	makeFakefont
} ifelse

/RM-Mode true def
/LC_Courier /Courier Ryumin checkJfont {
	makeEUCfont
} {
	makeFakefont
} ifelse

/RM-Mode false def

% ----------------------------------------------------------------------------
